"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv
import logging

logger = logging.getLogger('django')

env = load_dotenv()  # take environment variables from .env.

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k6c7c@ho)wp74-(q$6(@e5df*$wb4+9usk)h%h9k188h*prdug'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False, #отключать ли существующие настройки
    'formatters': {
        'i_formatter': {
            'format': '{asctime} {levelname} {module} {message}',
            'datetime': '%Y. %d. %m. %H:%M:%S',
            'style': '{',
        },
        'd_formatter': {
            'format': '{asctime} {levelname} {message}',
            'datetime': '%Y. %d. %m. %H:%M:%S',
            'style': '{',
        },
        'w_formatter': {
            'format': '{asctime} {levelname} {message} {pathname}',
            'datetime': '%Y. %d. %m. %H:%M:%S',
            'style': '{',
        },
        'e_c_formatter': {
            'format': '{asctime} {levelname} {message} {exc_info}',
            'datetime': '%Y. %d. %m. %H:%M:%S',
            'style': '{',
        },
        's_formatter': {
            'format': '{asctime} {levelname} {module} {message}',
            'datetime': '%Y. %d. %m. %H:%M:%S',
            'style': '{',
        },
        'mail_formatter': {
            'format': '{asctime} {levelname} {message}',
            'datetime': '%Y. %d. %m. %H:%M:%S',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'#if debug=false in settings.py
            },
        'require_debug_true': {
             '()': 'django.utils.log.RequireDebugTrue'#if debug=true in settings.py
            },
    },
    'handlers': {
        # 'console': {
        #     'level': 'DEBUG',
        #     'filters': ['require_debug_true'],
        #     'class': 'logging.StreamHandler',
        #     'formatter': 'd_formatter',
        # },
        'i_file': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'NewsPaper/general.log',
            'formatter': 'i_formatter',
        },
        'e_c_file': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'NewsPaper/errors.log',
            'formatter': 'e_c_formatter',
        },
        's_file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'NewsPaper/security.log',
            'formatter': 's_formatter',
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'mail_formatter',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['i_file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['e_c_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        ' django.server': {
            'handlers': ['e_c_file', 'mail_admins'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.template': {
            'handlers': ['e_c_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.db_backends': {
            'handlers': ['e_c_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['s_file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}



ALLOWED_HOSTS = ['127.0.0.1']


AUTHENTICATION_BACKENDS = [
     # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'news',
    'accounts',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'sign',
    'protect',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'subscribers',
    'django_apscheduler',
    'news.apps.NewsConfig',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    'django.middleware.cache.UpdateCacheMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.cache.FetchFromCacheMiddleware',
]


ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CACHES = {
    'default': {
        'TIMEOUT': 60,
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'cache_files'),  # Указываем, куда будем сохранять кэшируемые файлы
    }
}

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
# LOGIN_URL = 'sign/login/'
LOGIN_REDIRECT_URL = '/posts/'
LOGIN_URL = '/accounts/login/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / "static"
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTIFICATION_METHOD = 'email'
# ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_FORMS = {'signup': 'sign.models.CommonSignupForm'}

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
SERVER_EMAIL = os.getenv('SERVER_EMAIL')
EMAIL_USE_SSL = True
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER + '@yandex.ru'

# формат даты, которую будет воспринимать наш задачник (вспоминаем модуль по фильтрам)
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"

# если задача не выполняется за 25 секунд, то она автоматически снимается, можно больше, но будет медленно работать
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds

CELERY_ENABLE_UTC = False
CELERY_TIMEZONE = TIME_ZONE
CELERY_BROKER_URL = 'redis://localhost:6379'
#указывает на URL брокера сообщений (Redis). По умолчанию он находится на порту 6379.
CELERY_RESULT_BACKEND = 'redis://localhost:6379'#указывает на хранилище результатов выполнения задач
CELERY_ACCEPT_CONTENT = ['application/json']#допустимый формат данных
CELERY_TASK_SERIALIZER = 'json'#метод сериализации задач
CELERY_RESULT_SERIALIZER = 'json' #метод сериализации результатов

